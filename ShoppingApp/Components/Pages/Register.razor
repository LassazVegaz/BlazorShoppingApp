@page "/register"
@rendermode InteractiveServer
@implements IDisposable
@inject IUsersService usersService
@inject IMapper mapper

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center">Register</MudText>

<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mt-10">
    <MudPaper style="min-width:700px" Class="px-10 py-4">
        <EditForm OnValidSubmit="@Submit" FormName="registerform" EditContext="editContext">
            <DataAnnotationsValidator />

            <MudStack>
                <MudStack Row>
                    <MudTextField For="() => Model.FirstName" @bind-Value="@Model.FirstName" Label="First Name" Required="true" Variant="Variant.Outlined" />
                    <MudTextField For="() => Model.LastName" @bind-Value="@Model.LastName" Label="Last Name" Required="true" Variant="Variant.Outlined" />
                </MudStack>

                <MudStack AlignItems="AlignItems.End">
                    <MudTextField For="() => Model.Email" @bind-Value="@Model.Email" Label="Email" Required="true" Variant="Variant.Outlined" InputType="InputType.Email" FullWidth />
                     @if (validatingEmail)
                    {
                        <MudProgressCircular Class="absolute mr-3 mt-5" Size="Size.Small" Indeterminate="true" StrokeWidth="5" Color="Color.Warning" />
                    }
                </MudStack>

                <MudTextField For="() => Model.Password" @bind-Value="@Model.Password" Label="Password" Required="true" Variant="Variant.Outlined" InputType="InputType.Password" />
                <MudTextField For="() => Model.ConfirmPassword" @bind-Value="@Model.ConfirmPassword" Label="Confirm password" Required="true" Variant="Variant.Outlined" InputType="InputType.Password" />
            </MudStack>

            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mt-10">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Disabled="@isSubmiting">Register</MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
</MudStack>

@code {
    [SupplyParameterFromForm]
    RegisterModel Model { get; set; } = new();

    private CancellationTokenSource cancelationTokenSrc = new();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private bool validatingEmail = false;
    private bool isSubmiting = false;

    protected override void OnInitialized()
    {
        Model ??= new();
        editContext = new(Model);
        messageStore ??= new(editContext);
        editContext.OnValidationRequested += OnValidationRequested;
    }

    private void OnValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        messageStore?.Clear();
    }

    private async Task<bool> DoAsyncValidations()
    {
        if (await usersService.EmailExists(Model.Email))
        {
            messageStore?.Add(() => Model.Email, "This email is already in use");
            editContext?.NotifyValidationStateChanged();
            return false;
        }

        return true;
    }

    private async void Submit()
    {
        validatingEmail = true;
        isSubmiting = true;
        messageStore?.Clear();

        if (await DoAsyncValidations())
        {
            var user = mapper.Map<User>(Model);
            await usersService.CreateUser(user);
        }

        validatingEmail = false;
        isSubmiting = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        cancelationTokenSrc.Cancel();
        if (editContext is not null)
            editContext.OnValidationRequested -= OnValidationRequested;
    }
}