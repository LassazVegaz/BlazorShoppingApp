@page "/register"
@rendermode InteractiveServer
@implements IDisposable
@inject IUsersService usersService
@inject IMapper mapper

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center">Register</MudText>

<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mt-10">
    <MudPaper style="min-width:700px" Class="px-10 py-4">
        <EditForm OnValidSubmit="@Submit" FormName="registerform" EditContext="editContext">
            <DataAnnotationsValidator />

            <MudStack>
                <MudStack Row>
                    <MudTextField For="() => Model.FirstName" @bind-Value="@Model.FirstName" Label="First Name" Required="true" Variant="Variant.Outlined" />
                    <MudTextField For="() => Model.LastName" @bind-Value="@Model.LastName" Label="Last Name" Required="true" Variant="Variant.Outlined" />
                </MudStack>
                <MudTextField For="() => Model.Email" @bind-Value="@Model.Email" Label="Email" Required="true" Variant="Variant.Outlined" InputType="InputType.Email" />
                <MudTextField For="() => Model.Password" @bind-Value="@Model.Password" Label="Password" Required="true" Variant="Variant.Outlined" InputType="InputType.Password" />
                <MudTextField For="() => Model.ConfirmPassword" @bind-Value="@Model.ConfirmPassword" Label="Confirm password" Required="true" Variant="Variant.Outlined" InputType="InputType.Password" />
            </MudStack>

            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mt-10">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Register</MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
</MudStack>

@code {
    [SupplyParameterFromForm]
    RegisterModel Model { get; set; } = new();

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        Model ??= new();
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore ??= new(editContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (usersService.EmailExists(Model.Email))
        {
            messageStore?.Add(() => Model.Email, "This email is already in use");
        }
    }

    private Task Submit()
    {
        var user = mapper.Map<User>(Model);
        usersService.CreateUser(user);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        if (editContext is not null)
            editContext.OnValidationRequested -= HandleValidationRequested;
    }
}